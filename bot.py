import telebot
from telebot import types

TOKEN = '7592227260:AAEaFQPZmZriULaP1IVPW9FTA4A42eMMx1k'
bot = telebot.TeleBot(TOKEN)

banned_users = set()
admins = [6593948633, 1279364480]

@bot.message_handler(commands=['start'])
def start_message(message):
    if message.from_user.id in banned_users:
        bot.send_message(message.chat.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ üö´")
        return
    
    welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ–≤–æ–¥—É –∫–ª–∞–Ω–∞ –ü–ì–¢" –ò–ª—å–∏–Ω—Å–∫–∏–π", –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–°–≤—è–∑—å —Å —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π üì©", callback_data='support_request')
    markup.add(button)
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'support_request')
def handle_support_request(call):
    if call.from_user.id in banned_users:
        bot.send_message(call.message.chat.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ üö´")
        return
    
    bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å:")
    bot.register_next_step_handler(call.message, process_support_request)

def process_support_request(message):
    if message.from_user.id in banned_users:
        bot.send_message(message.chat.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ üö´")
        return
    
    request_text = message.text
    request_info = f"ID: {message.from_user.id}\nUsername: @{message.from_user.username}\n–ó–∞–ø—Ä–æ—Å: {request_text}"
    
    for admin_id in admins:
        try:
            bot.get_chat_member(admin_id, admin_id)
            markup = types.InlineKeyboardMarkup()
            reply_button = types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å ‚úçÔ∏è", callback_data=f'reply_{message.from_user.id}_{request_text}')
            ban_button = types.InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å üö´", callback_data=f'ban_{message.from_user.id}')
            markup.add(reply_button, ban_button)
            bot.send_message(admin_id, request_info, reply_markup=markup)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    
    bot.send_message(message.chat.id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('reply_'))
def handle_reply_request(call):
    _, user_id, request_text = call.data.split('_', 2)
    bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
    bot.register_next_step_handler(call.message, process_reply, user_id)

def process_reply(message, user_id):
    bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞: {message.text}")
    bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('ban_'))
def handle_ban_request(call):
    user_id = call.data.split('_')[1]
    banned_users.add(int(user_id))
    bot.send_message(call.message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    bot.send_message(user_id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ üö´")

@bot.message_handler(commands=['unban'])
def unban_user(message):
    if message.from_user.id not in admins:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        user_id = int(message.text.split()[1])
        banned_users.discard(user_id)
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unban <user_id>")

bot.polling(none_stop=True)